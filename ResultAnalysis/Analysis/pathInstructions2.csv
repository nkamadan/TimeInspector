,0,1,2
0,dff,120,"['rdtsc', 'mov qword [var_18h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_18h], rax', 'lfence', 'mov rdx, qword [var_28h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'mfence', 'lfence', 'rdtsc', 'mov qword [var_8h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_8h], rax', 'lfence', 'mov rax, qword [var_8h]', 'sub rax, qword [var_18h]', 'mov qword [var_10h], rax', 'cmp qword [var_10h], 0x95', 'ja 0x1541', 'cmp qword [var_10h], 0x289', 'jbe 0x1561', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x1561', 'mov eax, 0', 'jmp 0x15a6', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x1941', 'cmp dword [var_23fch], 1', 'jne 0x195f', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18dd', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dff_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_28h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mfence', 'lfence', 'rdtsc']"
1,dff,14,"['rdtsc', 'mov qword [var_18h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_18h], rax', 'lfence', 'mov rdx, qword [var_28h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'mfence', 'lfence', 'rdtsc']"
2,dff,106,"['rdtsc', 'mov qword [var_8h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_8h], rax', 'lfence', 'mov rax, qword [var_8h]', 'sub rax, qword [var_18h]', 'mov qword [var_10h], rax', 'cmp qword [var_10h], 0x95', 'ja 0x1541', 'cmp qword [var_10h], 0x289', 'jbe 0x1561', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x1561', 'mov eax, 0', 'jmp 0x15a6', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x1941', 'cmp dword [var_23fch], 1', 'jne 0x195f', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18dd', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dff_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_28h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mfence', 'lfence', 'rdtsc']"
3,dff,120,"['rdtsc', 'mov qword [var_8h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_8h], rax', 'lfence', 'mov rax, qword [var_8h]', 'sub rax, qword [var_18h]', 'mov qword [var_10h], rax', 'cmp qword [var_10h], 0x95', 'ja 0x1541', 'cmp qword [var_10h], 0x289', 'jbe 0x1561', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x1561', 'mov eax, 0', 'jmp 0x15a6', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x1941', 'cmp dword [var_23fch], 1', 'jne 0x195f', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18dd', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dff_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_28h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mfence', 'lfence', 'rdtsc', 'mov qword [var_18h], rax', 'mov qword [var_10h], rdx', 'mov rax, qword [var_10h]', 'shl rax, 0x20', 'or qword [var_18h], rax', 'lfence', 'mov rdx, qword [var_28h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'mfence', 'lfence', 'rdtsc']"
4,dfr,108,"['rdtsc', 'lfence', 'mov rdi, rax', 'mov r8, qword [rcx]', 'lfence', 'rdtsc', 'sub rax, rdi', 'mov qword [var_8h], rax', 'cmp qword [var_8h], 0x3b', 'ja 0x150e', 'cmp qword [var_8h], 0xc8', 'jbe 0x152e', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x152e', 'mov eax, 1', 'jmp 0x1570', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x190b', 'cmp dword [var_23fch], 1', 'jne 0x1929', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18a7', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dfr_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_18h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mov rax, qword [var_18h]', 'mov rcx, rax', 'mfence', 'lfence', 'rdtsc']"
5,dfr,7,"['rdtsc', 'lfence', 'mov rdi, rax', 'mov r8, qword [rcx]', 'lfence', 'rdtsc']"
6,dfr,101,"['rdtsc', 'sub rax, rdi', 'mov qword [var_8h], rax', 'cmp qword [var_8h], 0x3b', 'ja 0x150e', 'cmp qword [var_8h], 0xc8', 'jbe 0x152e', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x152e', 'mov eax, 1', 'jmp 0x1570', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x190b', 'cmp dword [var_23fch], 1', 'jne 0x1929', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18a7', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dfr_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_18h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mov rax, qword [var_18h]', 'mov rcx, rax', 'mfence', 'lfence', 'rdtsc']"
7,dfr,108,"['rdtsc', 'sub rax, rdi', 'mov qword [var_8h], rax', 'cmp qword [var_8h], 0x3b', 'ja 0x150e', 'cmp qword [var_8h], 0xc8', 'jbe 0x152e', 'mov rax, qword [obj.iter_no]', 'cmp rax, 0x1f3', 'ja 0x152e', 'mov eax, 1', 'jmp 0x1570', 'pop rbp', 'ret', 'mov dword [var_23fch], eax', 'cmp dword [var_23fch], 0', 'jne 0x190b', 'cmp dword [var_23fch], 1', 'jne 0x1929', 'sub dword [var_2440h], 1', 'mov rax, qword [buffer]', 'mov rdi, rax', 'call sym.imp.strlen', 'mov rdx, rax', 'mov rsi, qword [buffer]', 'mov eax, dword [fildes]', 'mov ecx, 0', 'mov edi, eax', 'call sym.imp.send', 'add dword [var_2440h], 1', 'mov eax, dword [var_2440h]', 'cmp eax, dword [var_2404h]', 'jl 0x18a7', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.flush', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_8h], rdi', 'mov rdx, qword [var_8h]', 'mov rcx, rdx', 'clflush byte [rcx]', 'nop', 'pop rbp', 'ret', 'lea rcx, [buf]', 'mov eax, dword [fildes]', 'mov edx, 0x400', 'mov rsi, rcx', 'mov edi, eax', 'call sym.imp.read', 'mov dword [var_2400h], eax', 'mov rax, qword [var_23f0h]', 'mov rdi, rax', 'call sym.dfr_phase_3', 'endbr64', 'push rbp', 'mov rbp, rsp', 'mov qword [var_18h], rdi', 'mov rax, qword [obj.iter_no]', 'add rax, 1', 'mov qword [obj.iter_no], rax', 'mov rax, qword [var_18h]', 'mov rcx, rax', 'mfence', 'lfence', 'rdtsc', 'lfence', 'mov rdi, rax', 'mov r8, qword [rcx]', 'lfence', 'rdtsc']"
8,flush_flush,16,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'or rdx, rax', 'mov qword [obj.start], rdx', 'nop dword [rax]', 'mov edi, dword [var_4h]', 'mov ebx, 0x1e', 'add rdi, rbp', 'call sym.flushandreload', 'endbr64', 'mov rcx, rdi', 'mfence', 'rdtsc']"
9,flush_flush,25,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'or rdx, rax', 'mov qword [obj.start], rdx', 'nop dword [rax]', 'mov edi, dword [var_4h]', 'mov ebx, 0x1e', 'add rdi, rbp', 'call sym.flushandreload', 'endbr64', 'mov rcx, rdi', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'clflush byte [rcx]', 'mfence', 'rdtsc']"
10,flush_flush,39,"['rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'clflush byte [rcx]', 'mfence', 'rdtsc', 'mfence', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, r8', 'lea rax, [rdx - 0xac]', 'cmp rax, 0x1c', 'ja 0x1470', 'add qword [obj.kpause], 1', 'ret', 'nop dword [rax]', 'call sym.imp.sched_yield', 'sub ebx, 1', 'jne 0x11d8', 'jmp 0x11c0', 'mov edi, dword [var_4h]', 'mov ebx, 0x1e', 'add rdi, rbp', 'call sym.flushandreload', 'endbr64', 'mov rcx, rdi', 'mfence', 'rdtsc']"
11,flush_flush,9,"['rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'clflush byte [rcx]', 'mfence', 'rdtsc']"
12,flush_flush,30,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, r8', 'lea rax, [rdx - 0xac]', 'cmp rax, 0x1c', 'ja 0x1470', 'add qword [obj.kpause], 1', 'ret', 'nop dword [rax]', 'call sym.imp.sched_yield', 'sub ebx, 1', 'jne 0x11d8', 'jmp 0x11c0', 'mov edi, dword [var_4h]', 'mov ebx, 0x1e', 'add rdi, rbp', 'call sym.flushandreload', 'endbr64', 'mov rcx, rdi', 'mfence', 'rdtsc']"
13,flush_flush,39,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, r8', 'lea rax, [rdx - 0xac]', 'cmp rax, 0x1c', 'ja 0x1470', 'add qword [obj.kpause], 1', 'ret', 'nop dword [rax]', 'call sym.imp.sched_yield', 'sub ebx, 1', 'jne 0x11d8', 'jmp 0x11c0', 'mov edi, dword [var_4h]', 'mov ebx, 0x1e', 'add rdi, rbp', 'call sym.flushandreload', 'endbr64', 'mov rcx, rdi', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'clflush byte [rcx]', 'mfence', 'rdtsc']"
14,flush_flush_spectre,61,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'lea rax, [var_20h]', 'mov qword [var_10h], rax', 'mov rax, qword [var_10h]', 'clflush byte [rax]', 'nop', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x14b2', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x162d', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1641', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1795', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_20h], rdi', 'mov dword [var_24h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
15,flush_flush_spectre,17,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'lea rax, [var_20h]', 'mov qword [var_10h], rax', 'mov rax, qword [var_10h]', 'clflush byte [rax]', 'nop', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
16,flush_flush_spectre,44,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x14b2', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x162d', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1641', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1795', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_20h], rdi', 'mov dword [var_24h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
17,flush_flush_spectre,61,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x14b2', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x162d', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1641', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1795', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_20h], rdi', 'mov dword [var_24h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'lea rax, [var_20h]', 'mov qword [var_10h], rax', 'mov rax, qword [var_10h]', 'clflush byte [rax]', 'nop', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
18,flush_reload,13,"['rdtsc', 'mfence', 'movabs r12, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'mov qword [obj.start], rdx', 'jmp 0x11e9', 'mov edi, dword [var_4h]', 'add rdi, rbp', 'mfence', 'cpuid', 'rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
19,flush_reload,15,"['rdtsc', 'mfence', 'movabs r12, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'mov qword [obj.start], rdx', 'jmp 0x11e9', 'mov edi, dword [var_4h]', 'add rdi, rbp', 'mfence', 'cpuid', 'rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
20,flush_reload,18,"['rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'add rcx, 1', 'mov qword [obj.kpause], rcx', 'jmp 0x11e4', 'call sym.imp.sched_yield', 'mov edi, dword [var_4h]', 'add rdi, rbp', 'mfence', 'cpuid', 'rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
21,flush_reload,2,"['rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
22,flush_reload,16,"['rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'add rcx, 1', 'mov qword [obj.kpause], rcx', 'jmp 0x11e4', 'call sym.imp.sched_yield', 'mov edi, dword [var_4h]', 'add rdi, rbp', 'mfence', 'cpuid', 'rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
23,flush_reload,18,"['rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'add rcx, 1', 'mov qword [obj.kpause], rcx', 'jmp 0x11e4', 'call sym.imp.sched_yield', 'mov edi, dword [var_4h]', 'add rdi, rbp', 'mfence', 'cpuid', 'rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'jbe 0x11d0']"
24,flush_reload,2,"['rdtscp', 'mov r8, rdx', 'mov rsi, rax', 'mfence', 'shl r8, 0x20', 'mov rcx, rdi', 'or r8, rsi', 'mov rax, qword [rcx]', 'mfence', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'ja 0x1530', 'rdtscp', 'mov rsi, rdx', 'mov r10, rax', 'cpuid', 'mfence', 'shl rsi, 0x20', 'mov rcx, rdi', 'mov r9, rsi', 'or r9, r10', 'sub r9, r8', 'clflush byte [rcx]', 'mov rcx, qword [obj.kpause]', 'cmp r9, 0xc7', 'ja 0x1530']"
25,flush_reload_spectre,60,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, qword [var_10h]', 'movzx eax, byte [rax]', 'movzx eax, al', 'mov dword [var_14h], eax', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x148f', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x15f3', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1607', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1753', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_10h], rdi', 'mov dword [var_14h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
26,flush_reload_spectre,16,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, qword [var_10h]', 'movzx eax, byte [rax]', 'movzx eax, al', 'mov dword [var_14h], eax', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
27,flush_reload_spectre,44,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x148f', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x15f3', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1607', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1753', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_10h], rdi', 'mov dword [var_14h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
28,flush_reload_spectre,60,"['rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'sub rax, rbx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, rbx', 'pop rbx', 'pop rbp', 'ret', 'mov rbx, rax', 'mov rax, qword [obj.tl]', 'cmp rbx, rax', 'jb 0x148f', 'mov rax, qword [obj.th]', 'cmp rbx, rax', 'jbe 0x15f3', 'mov rax, qword [canary]', 'xor rax, qword fs:[0x28]', 'je 0x1607', 'add rsp, 0x38', 'pop rbx', 'pop rbp', 'ret', 'jmp 0x1753', 'mov edx, dword [var_1ch]', 'mov rax, qword [var_18h]', 'mov esi, edx', 'mov rdi, rax', 'call sym.measure_access_latency', 'endbr64', 'push rbp', 'mov rbp, rsp', 'push rbx', 'mov qword [var_10h], rdi', 'mov dword [var_14h], esi', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc', 'shl rdx, 0x20', 'or rax, rdx', 'mov rbx, rax', 'lfence', 'nop', 'mov rax, qword [var_10h]', 'movzx eax, byte [rax]', 'movzx eax, al', 'mov dword [var_14h], eax', 'mfence', 'nop', 'lfence', 'nop', 'rdtsc']"
29,meltdown,21,"['rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mfence', 'rdtsc']"
30,meltdown,8,"['rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
31,meltdown,23,"['rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mov r9d, 0xf4240', 'nop dword [rax]', 'mfence', 'rdtsc']"
32,meltdown,31,"['rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mov r9d, 0xf4240', 'nop dword [rax]', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
33,meltdown,13,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mfence', 'rdtsc']"
34,meltdown,21,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
35,meltdown,15,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mov r9d, 0xf4240', 'nop dword [rax]', 'mfence', 'rdtsc']"
36,meltdown,23,"['rdtsc', 'mfence', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, rax', 'or rsi, r9', 'sub rdx, rsi', 'add r8, rdx', 'sub rdi, 1', 'jne 0x4023f0', 'mov r9d, 0xf4240', 'nop dword [rax]', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
37,meltdown,122,"['rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mov rax, r8', 'lea rsi, str.FlushReload:__zd_cycles__Reload_only:__zd_cycles_n', 'movabs rbx, 0x431bde82d7b634db', 'mul rbx', 'mov rax, rdi', 'mov edi, 1', 'shr rdx, 0x12', 'mov r12, rdx', 'mul rbx', 'xor eax, eax', 'mov rcx, r12', 'mov rbx, rdx', 'shr rbx, 0x12', 'mov rdx, rbx', 'call sym.debug', 'push r12', 'mov r12, rsi', 'sub rsp, 0xd0', 'mov qword [var_30h], rdx', 'mov qword [var_38h], rcx', 'mov qword [var_40h], r8', 'mov qword [var_48h], r9', 'test al, al', 'je 0x4022db', 'mov rax, qword fs:[0x28]', 'mov qword [var_18h], rax', 'xor eax, eax', 'mov edx, dword [obj.dbg]', 'test edx, edx', 'je 0x402347', 'mov rax, qword [var_18h]', 'xor rax, qword fs:[0x28]', 'jne 0x4023b8', 'add rsp, 0xd0', 'pop r12', 'ret', 'lea rdx, [rbx + r12*2]', 'mov edi, 2', 'movabs rcx, 0xaaaaaaaaaaaaaaab', 'mov rax, rdx', 'lea rsi, str.FlushReload_threshold:__zd_cycles_n', 'mul rcx', 'xor eax, eax', 'shr rdx, 1', 'mov qword [obj.config], rdx', 'call sym.debug', 'mov rax, qword [var_88h]', 'xor rax, qword fs:[0x28]', 'jne 0x4024f5', 'add rsp, 0x98', 'pop rbx', 'pop r12', 'ret', 'movabs rax, 0x100000001', 'mov dword [0x004e15cc], 3', 'mov qword [0x004e15d0], rax', 'movabs rax, 0x271000000000', 'mov qword [0x004e15d8], rax', 'movabs rax, 0xffff880000000000', 'mov qword [0x004e15e0], rax', 'jmp 0x402863', 'cmp qword [obj.config], 0', 'je 0x402a66', 'xor eax, eax', 'call sym.detect_flush_reload_threshold', 'push r12', 'push rbx', 'sub rsp, 0x98', 'mov rax, qword fs:[0x28]', 'mov qword [var_88h], rax', 'xor eax, eax', 'lea rcx, [var_40h_2]', 'mov rax, qword [rcx]', 'mov edi, 0xf4240', 'xor r8d, r8d', 'nop dword [rax]', 'mfence', 'rdtsc']"
38,meltdown,130,"['rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mov rax, r8', 'lea rsi, str.FlushReload:__zd_cycles__Reload_only:__zd_cycles_n', 'movabs rbx, 0x431bde82d7b634db', 'mul rbx', 'mov rax, rdi', 'mov edi, 1', 'shr rdx, 0x12', 'mov r12, rdx', 'mul rbx', 'xor eax, eax', 'mov rcx, r12', 'mov rbx, rdx', 'shr rbx, 0x12', 'mov rdx, rbx', 'call sym.debug', 'push r12', 'mov r12, rsi', 'sub rsp, 0xd0', 'mov qword [var_30h], rdx', 'mov qword [var_38h], rcx', 'mov qword [var_40h], r8', 'mov qword [var_48h], r9', 'test al, al', 'je 0x4022db', 'mov rax, qword fs:[0x28]', 'mov qword [var_18h], rax', 'xor eax, eax', 'mov edx, dword [obj.dbg]', 'test edx, edx', 'je 0x402347', 'mov rax, qword [var_18h]', 'xor rax, qword fs:[0x28]', 'jne 0x4023b8', 'add rsp, 0xd0', 'pop r12', 'ret', 'lea rdx, [rbx + r12*2]', 'mov edi, 2', 'movabs rcx, 0xaaaaaaaaaaaaaaab', 'mov rax, rdx', 'lea rsi, str.FlushReload_threshold:__zd_cycles_n', 'mul rcx', 'xor eax, eax', 'shr rdx, 1', 'mov qword [obj.config], rdx', 'call sym.debug', 'mov rax, qword [var_88h]', 'xor rax, qword fs:[0x28]', 'jne 0x4024f5', 'add rsp, 0x98', 'pop rbx', 'pop r12', 'ret', 'movabs rax, 0x100000001', 'mov dword [0x004e15cc], 3', 'mov qword [0x004e15d0], rax', 'movabs rax, 0x271000000000', 'mov qword [0x004e15d8], rax', 'movabs rax, 0xffff880000000000', 'mov qword [0x004e15e0], rax', 'jmp 0x402863', 'cmp qword [obj.config], 0', 'je 0x402a66', 'xor eax, eax', 'call sym.detect_flush_reload_threshold', 'push r12', 'push rbx', 'sub rsp, 0x98', 'mov rax, qword fs:[0x28]', 'mov qword [var_88h], rax', 'xor eax, eax', 'lea rcx, [var_40h_2]', 'mov rax, qword [rcx]', 'mov edi, 0xf4240', 'xor r8d, r8d', 'nop dword [rax]', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
39,meltdown,23,"['rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mfence', 'rdtsc']"
40,meltdown,8,"['rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
41,meltdown,114,"['rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mov rax, r8', 'lea rsi, str.FlushReload:__zd_cycles__Reload_only:__zd_cycles_n', 'movabs rbx, 0x431bde82d7b634db', 'mul rbx', 'mov rax, rdi', 'mov edi, 1', 'shr rdx, 0x12', 'mov r12, rdx', 'mul rbx', 'xor eax, eax', 'mov rcx, r12', 'mov rbx, rdx', 'shr rbx, 0x12', 'mov rdx, rbx', 'call sym.debug', 'push r12', 'mov r12, rsi', 'sub rsp, 0xd0', 'mov qword [var_30h], rdx', 'mov qword [var_38h], rcx', 'mov qword [var_40h], r8', 'mov qword [var_48h], r9', 'test al, al', 'je 0x4022db', 'mov rax, qword fs:[0x28]', 'mov qword [var_18h], rax', 'xor eax, eax', 'mov edx, dword [obj.dbg]', 'test edx, edx', 'je 0x402347', 'mov rax, qword [var_18h]', 'xor rax, qword fs:[0x28]', 'jne 0x4023b8', 'add rsp, 0xd0', 'pop r12', 'ret', 'lea rdx, [rbx + r12*2]', 'mov edi, 2', 'movabs rcx, 0xaaaaaaaaaaaaaaab', 'mov rax, rdx', 'lea rsi, str.FlushReload_threshold:__zd_cycles_n', 'mul rcx', 'xor eax, eax', 'shr rdx, 1', 'mov qword [obj.config], rdx', 'call sym.debug', 'mov rax, qword [var_88h]', 'xor rax, qword fs:[0x28]', 'jne 0x4024f5', 'add rsp, 0x98', 'pop rbx', 'pop r12', 'ret', 'movabs rax, 0x100000001', 'mov dword [0x004e15cc], 3', 'mov qword [0x004e15d0], rax', 'movabs rax, 0x271000000000', 'mov qword [0x004e15d8], rax', 'movabs rax, 0xffff880000000000', 'mov qword [0x004e15e0], rax', 'jmp 0x402863', 'cmp qword [obj.config], 0', 'je 0x402a66', 'xor eax, eax', 'call sym.detect_flush_reload_threshold', 'push r12', 'push rbx', 'sub rsp, 0x98', 'mov rax, qword fs:[0x28]', 'mov qword [var_88h], rax', 'xor eax, eax', 'lea rcx, [var_40h_2]', 'mov rax, qword [rcx]', 'mov edi, 0xf4240', 'xor r8d, r8d', 'nop dword [rax]', 'mfence', 'rdtsc']"
42,meltdown,122,"['rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mov rax, r8', 'lea rsi, str.FlushReload:__zd_cycles__Reload_only:__zd_cycles_n', 'movabs rbx, 0x431bde82d7b634db', 'mul rbx', 'mov rax, rdi', 'mov edi, 1', 'shr rdx, 0x12', 'mov r12, rdx', 'mul rbx', 'xor eax, eax', 'mov rcx, r12', 'mov rbx, rdx', 'shr rbx, 0x12', 'mov rdx, rbx', 'call sym.debug', 'push r12', 'mov r12, rsi', 'sub rsp, 0xd0', 'mov qword [var_30h], rdx', 'mov qword [var_38h], rcx', 'mov qword [var_40h], r8', 'mov qword [var_48h], r9', 'test al, al', 'je 0x4022db', 'mov rax, qword fs:[0x28]', 'mov qword [var_18h], rax', 'xor eax, eax', 'mov edx, dword [obj.dbg]', 'test edx, edx', 'je 0x402347', 'mov rax, qword [var_18h]', 'xor rax, qword fs:[0x28]', 'jne 0x4023b8', 'add rsp, 0xd0', 'pop r12', 'ret', 'lea rdx, [rbx + r12*2]', 'mov edi, 2', 'movabs rcx, 0xaaaaaaaaaaaaaaab', 'mov rax, rdx', 'lea rsi, str.FlushReload_threshold:__zd_cycles_n', 'mul rcx', 'xor eax, eax', 'shr rdx, 1', 'mov qword [obj.config], rdx', 'call sym.debug', 'mov rax, qword [var_88h]', 'xor rax, qword fs:[0x28]', 'jne 0x4024f5', 'add rsp, 0x98', 'pop rbx', 'pop r12', 'ret', 'movabs rax, 0x100000001', 'mov dword [0x004e15cc], 3', 'mov qword [0x004e15d0], rax', 'movabs rax, 0x271000000000', 'mov qword [0x004e15d8], rax', 'movabs rax, 0xffff880000000000', 'mov qword [0x004e15e0], rax', 'jmp 0x402863', 'cmp qword [obj.config], 0', 'je 0x402a66', 'xor eax, eax', 'call sym.detect_flush_reload_threshold', 'push r12', 'push rbx', 'sub rsp, 0x98', 'mov rax, qword fs:[0x28]', 'mov qword [var_88h], rax', 'xor eax, eax', 'lea rcx, [var_40h_2]', 'mov rax, qword [rcx]', 'mov edi, 0xf4240', 'xor r8d, r8d', 'nop dword [rax]', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r9, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
43,meltdown,15,"['rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mfence', 'rdtsc']"
44,meltdown,23,"['rdtsc', 'mov r11, rax', 'mfence', 'clflush byte [rcx]', 'shl rdx, 0x20', 'shl rsi, 0x20', 'or rdx, r11', 'or rsi, r10', 'sub rdx, rsi', 'add rdi, rdx', 'sub r9, 1', 'jne 0x402430', 'mfence', 'rdtsc', 'mov rsi, rdx', 'mov r10, rax', 'mfence', 'mov rax, qword [rcx]', 'mfence', 'rdtsc']"
45,prime_probe,90,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
46,prime_probe,66,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
47,prime_probe,90,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
48,prime_probe,156,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
49,prime_probe,24,"['rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
50,prime_probe,90,"['rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
51,prime_probe,24,"['rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
52,prime_probe,90,"['rdtsc', 'mfence', 'mov qword [obj.rev], 1', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'jbe 0x167d', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
53,prime_probe,90,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
54,prime_probe,156,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
55,prime_probe,90,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
56,prime_probe,66,"['rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
57,prime_probe,24,"['rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
58,prime_probe,90,"['rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
59,prime_probe,24,"['rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc']"
60,prime_probe,90,"['rdtsc', 'mfence', 'mov qword [obj.rev], 0', 'shl rdx, 0x20', 'or rdx, rax', 'sub rdx, rcx', 'mov r9, rdx', 'cmp r9, 0xe6', 'ja 0x1522', 'add qword [obj.kpause], 1', 'mov qword [obj.kcount], 0', 'jmp 0x1549', 'mov ebx, 0xbb8', 'nop', 'call sym.imp.sched_yield', 'endbr64', 'bnd jmp qword [reloc.sched_yield]', 'sub ebx, 1', 'jne 0x1550', 'cmp qword [obj.rev], 0', 'je 0x140d', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
61,prime_probe,66,"['rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'mov rax, qword [0x040050b0]', 'mov rdx, qword [0x040050a8]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050b8]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050c0]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rsi, qword [rax]', 'mov rcx, qword [rcx]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050d0]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050d8]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rsi, qword [rax]', 'mov rcx, qword [rcx]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050e8]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050f0]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
62,prime_probe,66,"['rdtsc', 'shl rdx, 0x20', 'or rdx, rax', 'mov r8, rdx', 'mfence', 'mov rax, qword [0x040050e8]', 'mov rdx, qword [0x040050f0]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050e0]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050d8]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rsi, qword [rax]', 'mov rcx, qword [rcx]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050c8]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050c0]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rsi, qword [rax]', 'mov rcx, qword [rcx]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [rdx]', 'mov rcx, qword [rax]', 'mov rcx, qword [0x040050b0]', 'mov rsi, qword [rcx]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rcx]', 'mov rdx, qword [0x040050a8]', 'mov rsi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rcx]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
63,prime_probe,11,"['rdtsc', 'mfence', 'movabs rbp, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'cmp qword [obj.rev], 0', 'mov qword [obj.start], rdx', 'jne 0x1568', 'mfence', 'rdtsc']"
64,prime_probe,77,"['rdtsc', 'mfence', 'movabs rbp, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'cmp qword [obj.rev], 0', 'mov qword [obj.start], rdx', 'jne 0x1568', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050a8]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b0]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050c8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050d0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050f0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
65,prime_probe,11,"['rdtsc', 'mfence', 'movabs rbp, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'cmp qword [obj.rev], 0', 'mov qword [obj.start], rdx', 'jne 0x1568', 'mfence', 'rdtsc']"
66,prime_probe,77,"['rdtsc', 'mfence', 'movabs rbp, 0xc9a633fcd967300d', 'shl rdx, 0x20', 'or rdx, rax', 'cmp qword [obj.rev], 0', 'mov qword [obj.start], rdx', 'jne 0x1568', 'mfence', 'rdtsc', 'shl rdx, 0x20', 'mov rcx, rdx', 'or rcx, rax', 'mfence', 'mov rdx, qword [0x040050f0]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050e8]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050e0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050d8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050d0]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050c8]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050c0]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mov rax, qword [0x040050b8]', 'mov rdi, qword [rax]', 'mov rsi, qword [rsi]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [rdx]', 'mov rsi, qword [rax]', 'mov rsi, qword [0x040050b0]', 'mov rdi, qword [rsi]', 'mov rdx, qword [rdx]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [rax]', 'mov rdx, qword [rsi]', 'mov rdx, qword [0x040050a8]', 'mov rdi, qword [rdx]', 'mov rax, qword [rax]', 'mov rax, qword [rsi]', 'mov rax, qword [rdx]', 'mfence', 'rdtsc']"
67,sender,28,"['call sym.imp.clock', 'mov qword [var_1458h], rax', 'mov dword [var_1490h], 0', 'jmp 0x17ee', 'cmp dword [var_1490h], 0x3e7', 'jle 0x1732', 'call sym.imp.clock']"
